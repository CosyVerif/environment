#! /usr/bin/env bash

for i in "$@"
do
  case ${i} in
    --in-ci)
      in_ci=true
      shift # past argument=value
    ;;
    *)
      echo "Usage: "
      echo "  install [--in-ci]"
      exit 1;
    ;;
  esac
done

parallel=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null)

if [ ! -z "${in_ci+x}" ]; then
  red=''
  green=''
  nc=''
else
  red='\033[0;31m'
  green='\033[0;32m'
  nc='\033[0m'
fi

# Useful variables:
cosy_temp=$(mktemp -d 2>/dev/null || mktemp -d -t cosy)
cosy_prefix="${cosy_temp}/usr"
cosy_bin_path="${cosy_prefix}/bin/cosy-path"
cosy_bin_version="${cosy_prefix}/bin/cosy-version"
cosy_bin_cli="${cosy_prefix}/bin/cosy"
cosy_rockstree="${cosy_prefix}/local/cosy"
cosy_log="${cosy_temp}/install.log"
cosy_dependencies=(
  ansicolors
  argparse
  copas
  hotswap-http
  i18n
  layeredata
  lua-cjson
  lua-websockets
  luafilesystem
  luaposix
  luasocket
  luasec
  lustache
)

echo -e "Prefix   : ${green}${cosy_prefix}${nc}"
echo -e "Temporary: ${green}${cosy_temp}${nc}"
echo -e "Log file : ${green}${cosy_log}${nc}"

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}

# Install dependencies:
function install_dependencies ()
{
  echo "Installing development packages."
  case "$(uname -s)" in
    "Linux")
      sudo apt-get update  --yes
      sudo apt-get install --yes git make clang gcc diffutils patch curl unzip \
                                 perl build-essential \
                                 libc6-dev libssl-dev
      ;;
    "Darwin")
      HOMEBREW_PREFIX=$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
      export CPATH="${HOMEBREW_PREFIX}/include:${CPATH}"
      export LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
      export LD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
      export DYLD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
      brew update
      brew install openssl
      brew link --force openssl
      ;;
    *)
      echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
      exit 1
      ;;
  esac >> "${cosy_log}" 2>&1
  export CPATH="${cosy_prefix}/include:${CPATH}"
  export LIBRARY_PATH="${cosy_prefix}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="${cosy_prefix}/lib:${LD_LIBRARY_PATH}"
}

function install_lua ()
{
  echo "Installing lua."
  (
    cd lua || exit 1
    cat > "${cosy_temp}/lua.patch" <<EOL
--- Makefile.back	2015-12-22 09:51:51.000000000 +0100
+++ Makefile	2015-12-22 09:52:26.000000000 +0100
@@ -10,7 +10,7 @@
 # so take care if INSTALL_TOP is not an absolute path. See the local target.
 # You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with
 # LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.
-INSTALL_TOP= /usr/local
+INSTALL_TOP= ${cosy_rockstree}
 INSTALL_BIN= \$(INSTALL_TOP)/bin
 INSTALL_INC= \$(INSTALL_TOP)/include
 INSTALL_LIB= \$(INSTALL_TOP)/lib
EOL
    patch -i "${cosy_temp}/lua.patch" Makefile
    case "$(uname -s)" in
      "Linux")
        make linux -j"${parallel}"
        ;;
      "Darwin")
        make macosx -j"${parallel}"
        ;;
      *)
        echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
        exit 1
        ;;
    esac >> "${cosy_log}" 2>&1
    make install CC="clang"
    make clean
    git checkout Makefile
  ) >> "${cosy_log}" 2>&1
  {
    lua_version=$("${cosy_rockstree}/bin/lua" -e 'print (_VERSION:match "Lua%s+(%d%.%d).*")')
    lua_sversion=${lua_version//./}
    ln -sF "lua"       "${cosy_rockstree}/bin/lua${lua_sversion}"
    ln -sF "lua.h"     "${cosy_rockstree}/include/lua${lua_sversion}.h"
    ln -sF "liblua.a"  "${cosy_rockstree}/lib/liblua${lua_sversion}.a"
  } >> "${cosy_log}" 2>&1
}

function install_luarocks ()
{
  echo "Installing luarocks."
  (
    cd luarocks || exit 1
    export PATH="${cosy_rockstree}/bin:${PATH}"
    ./configure --prefix="${cosy_rockstree}" \
                --with-lua-bin="${cosy_rockstree}/bin/" \
                --with-lua-include="${cosy_rockstree}/include/" \
                --with-lua-lib="${cosy_rockstree}/lib/"
    make bootstrap
    make clean
  ) >> "${cosy_log}" 2>&1
}

# Install cosyverif:
function install_cosyverif ()
{
  echo "Installing rocks."
  # Remove symlink to cosy to avoid modification of sources files by luarocks:
  rm -rf "${cosy_rockstree}/share/lua/${lua_version}/redis.lua"
  rm -rf "${cosy_rockstree}/share/lua/${lua_version}/cosy"
  # Install luasec before everything to allow the use of HTTPS in luarocks:
  export CC=clang
  for dependency in luasec ${cosy_dependencies[*]}; do
    if "${cosy_rockstree}/bin/luarocks" list \
        --porcelain \
        --tree="${cosy_rockstree}" \
        | grep --silent "${dependency}"; then
      echo "  Not installing ${dependency} as it is already installed."
    else
      echo -n "  Installing ${dependency} as it is not installed... "
      # shellcheck disable=SC2086
      if "${cosy_rockstree}/bin/luarocks" install "${dependency}" \
          >> "${cosy_log}" 2>&1; then
        echo -e "${green}success${nc}"
      else
        echo -e "${red}failure${nc}"
      fi
    fi
  done
  # Copy in rockstree:
  rm -rf "${cosy_rockstree}/share/lua/${lua_version}/redis.lua"
  cp     "redis-lua/src/redis.lua" \
         "${cosy_rockstree}/share/lua/${lua_version}/redis.lua"
  rm -rf "${cosy_rockstree}/share/lua/${lua_version}/cosy"
  cp -r  "src/cosy" \
         "${cosy_rockstree}/share/lua/${lua_version}/cosy"
}

function install_bin ()
{
  base=$(basename "${cosy_bin_path}")
  cat > "${cosy_bin_path}" <<EOF
#! /bin/bash

$(grep -v "#!" < "sh-realpath/realpath.sh")

cosy_where=\$(realpath "\${BASH_SOURCE}")
cosy_where=\$(dirname  "\${cosy_where}")
cosy_where=\$(dirname  "\${cosy_where}")
export COSY_PREFIX="\${cosy_where}"

export PATH="\${COSY_PREFIX}/bin:\${COSY_PREFIX}/local/cosy/bin:\${PATH}"

lua_version=\$(lua -e 'print (_VERSION:match "Lua%s+(%d%.%d).*")')
lua_sversion=\${lua_version//./}

export LUA_PATH="\${COSY_PREFIX}/local/cosy/share/lua/\${lua_version}/?.lua;\${COSY_PREFIX}/local/cosy/share/lua/\${lua_version}/?/init.lua"
export LUA_CPATH="\${COSY_PREFIX}/local/cosy/lib/lua/\${lua_version}/?.so"

export LIBRARY_PATH="\${COSY_PREFIX}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${LD_LIBRARY_PATH}"
export DYLD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
EOF
  chmod a+x "${cosy_bin_path}"

  cat > "${cosy_bin_version}" <<EOF
#! /bin/bash

echo "$(git describe)"
EOF
  chmod a+x "${cosy_bin_version}"

  cat > "${cosy_bin_cli}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
\$(lua -e "print (package.searchpath ('cosy.cli', package.path))") "\$@"
EOF
  chmod a+x "${cosy_bin_cli}"
}

function fix_string ()
{
  echo "$1" \
    | sed -e 's/^[[:space:]]+/ /' \
    | sed -e 's/^[[:space:]]*//' \
    | sed -e 's/[[:space:]]*$//' \
    | tr '/' '-' \
    | tr '[:upper:]' '[:lower:]'
}

# Generate the package:
function generate_package ()
{
  version=$(fix_string "$(git describe)")
  os=$(fix_string "$(uname -s)")
  arch=$(fix_string "$(uname -m)")
  archive="cosy-client-${version}-${os}-${arch}.tar.gz"
  echo -e "Packaging in ${green}${cosy_temp}/${archive}${nc}."
  # Clean:
  {
    "${cosy_prefix}/local/cosy/bin/luarocks" remove \
       --tree="${cosy_prefix}/local/cosy" luarocks
    rm -rf  "${cosy_prefix}/local/cosy/lib/luarocks"
    sed -i "" \
        -e "s/export COSY_PREFIX=.*/export COSY_PREFIX=\"...\"/" \
        "${cosy_prefix}/bin/cosy-path"
  } >> "${cosy_log}" 2>&1
  # Package:
  (
    cd "${cosy_temp}" || exit 1
    rm -f   "${archive}"
    tar czf "${archive}" "usr"
  ) >> "${cosy_log}" 2>&1
}

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}

git submodule init
git submodule update
mkdir -p "${cosy_prefix}"
mkdir -p "${cosy_prefix}/bin"
mkdir -p "${cosy_prefix}/lib"
trap error ERR
install_dependencies
install_lua
install_luarocks
install_cosyverif
install_bin
generate_package

if [ ! -z "${in_ci+x}" ]; then
  cat "${cosy_log}"
fi
