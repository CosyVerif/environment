#! /usr/bin/env bash

for i in "$@"
do
  case ${i} in
    -p=*|--prefix=*)
      cosy_prefix="${i#*=}"
      cosy_prefix=${cosy_prefix%/}
      shift # past argument=value
    ;;
    --in-ci)
      in_ci=true
      shift # past argument=value
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--in-ci]"
      exit 1;
    ;;
  esac
done

cosy_prefix=${cosy_prefix:-/usr/local}

parallel=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null)

if [ ! -z "${in_ci+x}" ]; then
  red=''
  green=''
  nc=''
else
  red='\033[0;31m'
  green='\033[0;32m'
  nc='\033[0m'
fi

# Useful variables:
cosy_temp=$(mktemp -d 2>/dev/null || mktemp -d -t cosy)
cosy_bin_path="${cosy_prefix}/bin/cosy-path"
cosy_bin_version="${cosy_prefix}/bin/cosy-version"
cosy_bin_cli="${cosy_prefix}/bin/cosy"
cosy_bin_server="${cosy_prefix}/bin/cosy-server"
cosy_bin_check="${cosy_prefix}/bin/cosy-check"
cosy_bin_uninstall="${cosy_prefix}/bin/cosy-uninstall"
cosy_rockstree="${cosy_prefix}/local/cosy"
cosy_log="${cosy_temp}/install.log"
cosy_dependencies=(
  luasec
  ansicolors
  argparse
  bcrypt
  busted
  copas-ev
  coronest
  dkjson
  hotswap-ev
  hotswap-http
  i18n
  jwt
  layeredata
  lua-cjson
  lua-resty-http
  lua-websockets
  luacheck
  luacov
  luacrypto
  luafilesystem
  lualogging
  luaposix
  luasec
  luasocket
  lustache
  md5
  serpent
)

echo -e "Prefix   : ${green}${cosy_prefix}${nc}"
echo -e "Temporary: ${green}${cosy_temp}${nc}"
echo -e "Log file : ${green}${cosy_log}${nc}"

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}

# Install dependencies:
function install_dependencies ()
{
  echo "Installing development packages."
  case "$(uname -s)" in
    "Linux")
      sudo apt-get update  --yes
      sudo apt-get install --yes git make clang gcc diffutils patch curl unzip \
                                 perl build-essential wget \
                                 libc6-dev libssl-dev libev-dev \
                                 libreadline-dev libncurses5-dev libpcre3-dev \
                                 redis-server imagemagick \
                                 lua5.2 liblua5.2-dev
      ;;
    "Darwin")
      HOMEBREW_PREFIX=$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
      export CPATH="${HOMEBREW_PREFIX}/include:${CPATH}"
      export LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
      export LD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
      export DYLD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
      brew update
      brew install openssl libev pcre redis imagemagick wget lua
      brew link --force openssl
      ;;
    *)
      echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
      exit 1
      ;;
  esac >> "${cosy_log}" 2>&1
  export CPATH="${cosy_prefix}/include:${CPATH}"
  export LIBRARY_PATH="${cosy_prefix}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="${cosy_prefix}/lib:${LD_LIBRARY_PATH}"
}

# Install LuaJIT with 5.2 compatibility:
function install_luajit ()
{
  echo "Installing luajit."
  (
    cd luajit || exit 1
    cat > "${cosy_temp}/luajit.patch" <<EOL
diff -rupN LuaJIT-2.0.4.back/Makefile LuaJIT-2.0.4/Makefile
--- LuaJIT-2.0.4.back/Makefile	2015-10-02 17:19:16.774268017 +0200
+++ LuaJIT-2.0.4/Makefile	2015-10-02 17:11:14.533865635 +0200
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+export PREFIX= ${cosy_rockstree}/5.1
 export MULTILIB= lib
 ##############################################################################

diff -rupN LuaJIT-2.0.4.back/src/Makefile LuaJIT-2.0.4/src/Makefile
--- LuaJIT-2.0.4.back/src/Makefile	2015-10-02 17:19:06.294172164 +0200
+++ LuaJIT-2.0.4/src/Makefile	2015-10-02 17:18:50.882031189 +0200
@@ -100,7 +100,7 @@ XCFLAGS=
 # enabled by default. Some other features that *might* break some existing
 # code (e.g. __pairs or os.execute() return values) can be enabled here.
 # Note: this does not provide full compatibility with Lua 5.2 at this time.
-#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
+XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
 #
 # Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.
 #XCFLAGS+= -DLUAJIT_DISABLE_JIT
EOL
    patch -p1 -i "${cosy_temp}/luajit.patch"
    make -j"${parallel}"
    make install CC="clang"
    make clean
    git checkout Makefile
    git checkout src/Makefile
    ln -sf "luajit-2.1.0-beta1" "${cosy_rockstree}/5.1/bin/luajit"
    ln -sf "luajit-2.1"         "${cosy_rockstree}/5.1/include/luajit-2.0"
  ) >> "${cosy_log}" 2>&1
}

# Install openresty:
function install_openresty ()
{
  echo "Installing openresty."
  (
    cd openresty || exit 1
    make
    cd ngx_openresty-1.9.3.2rc3 || exit 1
    ./configure --prefix="${cosy_prefix}/local/openresty" \
                --without-lua51 \
                --with-luajit="${cosy_rockstree}/5.1" \
                --with-ipv6 \
                --with-pcre-jit
    make -j"${parallel}"
    make install
    make clean
  ) >> "${cosy_log}" 2>&1
}

function install_luarocks ()
{
  echo "Installing luarocks."
  (
    cd luarocks || exit 1
    # shellcheck disable=SC2030
    export PATH="${cosy_rockstree}/5.1/bin:${PATH}"
    ./configure --prefix="${cosy_rockstree}/5.1" \
                --lua-version="5.1" \
                --lua-suffix="jit" \
                --with-lua-bin="${cosy_rockstree}/5.1/bin/" \
                --with-lua-include="${cosy_rockstree}/5.1/include/luajit-2.0/" \
                --with-lua-lib="${cosy_rockstree}/5.1/lib/"
    make bootstrap
    make clean
  ) >> "${cosy_log}" 2>&1
  for version in "5.2"; do
    echo "Installing luarocks for lua-${version}."
    (
      cd luarocks || exit 1
      # shellcheck disable=SC2030
      # shellcheck disable=SC2031
      export PATH="${cosy_rockstree}/${version}/bin:${PATH}"
      make clean
      ./configure --prefix="${cosy_rockstree}/${version}" \
                  --lua-version="${version}" \
                  --lua-suffix="${version}"
      make bootstrap
      make clean
    ) >> "${cosy_log}" 2>&1
  done
}

# Install cosyverif:
function install_cosyverif ()
{
  for version in "5.1" "5.2"; do
    echo "Installing rocks for lua-${version}."
    # shellcheck disable=SC2031
    export PATH="${cosy_rockstree}/${version}/bin:${PATH}"
    # Remove symlink to cosy to avoid modification of sources files by luarocks:
    rm -rf "${cosy_rockstree}/${version}/share/lua/${version}/redis.lua"
    rm -rf "${cosy_rockstree}/${version}/share/lua/${version}/cosy"
    # Install luasec before everything to allow the use of HTTPS in luarocks:
    options=(LDFLAGS="-lrt")
    if [ "${version}" = "5.1" ]; then
      more_dependencies=( luabitop )
    fi
    export CC=clang
    for dependency in ${cosy_dependencies[*]} ${more_dependencies[*]}; do
      if "${cosy_rockstree}/${version}/bin/luarocks" list \
          --porcelain \
          --tree="${cosy_rockstree}/${version}" \
          | grep --silent "${dependency}"; then
        echo "  Not installing ${dependency} as it is already installed."
      else
        echo "  Installing ${dependency} as it is not installed."
        # shellcheck disable=SC2086
        "${cosy_rockstree}/${version}/bin/luarocks" install "${dependency}" ${options[*]} \
            >> "${cosy_log}" 2>&1
      fi
    done
    # Create symlinks in rockstree:
    rm -rf "${cosy_rockstree}/${version}/share/lua/${version}/redis.lua"
    ln -s  "$(pwd)/redis-lua/src/redis.lua" \
           "${cosy_rockstree}/${version}/share/lua/${version}/redis.lua"
    rm -rf "${cosy_rockstree}/${version}/share/lua/${version}/cosy"
    ln -s  "$(pwd)/src/cosy" \
           "${cosy_rockstree}/${version}/share/lua/${version}/cosy"
  done
}

function install_bin ()
{
  base=$(basename "${cosy_bin_path}")
  cat > "${cosy_bin_path}" <<EOF
#! /bin/bash

export COSY_PREFIX=\$(dirname "\${0}")/..

if command -v "brew" > /dev/null 2>&1; then
  HOMEBREW_PREFIX=\$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
  export LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
  export DYLD_LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
fi

export PATH="\${COSY_PREFIX}/bin:\${COSY_PREFIX}/local/cosy/5.1/bin:\${PATH}"
export LUA_PATH="\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/?.lua;\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/?/init.lua"
export LUA_CPATH="\${COSY_PREFIX}/local/cosy/5.1/lib/lua/5.1/?.so"

export LIBRARY_PATH="\${COSY_PREFIX}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${LD_LIBRARY_PATH}"
export DYLD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
EOF
  chmod a+x "${cosy_bin_path}"

  cat > "${cosy_bin_version}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
(
  cd "$(pwd)" || exit 1
  git describe
)
EOF
  chmod a+x "${cosy_bin_version}"

  cat > "${cosy_bin_cli}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/cli/init.lua" "\$@"
EOF
  chmod a+x "${cosy_bin_cli}"

  cat > "${cosy_bin_server}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/server/cli.lua" "\$@"
EOF
  chmod a+x "${cosy_bin_server}"

  cat > "${cosy_bin_uninstall}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
if [ -e "\${COSY_PREFIX}/bin/cosy-server" ]; then
  "\${COSY_PREFIX}/bin/cosy-server" stop --force
fi
rm -rf "\${COSY_PREFIX}/bin/cosy"* \
       "\${COSY_PREFIX}/etc/cosy"* \
       "\${COSY_PREFIX}/local/cosy" \
       "\${COSY_PREFIX}/local/openresty"*
# shellcheck disable=SC2034
for i in {1..10}; do
  find "\${COSY_PREFIX}" -maxdepth 5 -empty -exec rm -rf {} \; \
    > /dev/null 2>&1
done
echo -e "Cosy has been ${green}successfully uninstalled${nc}."
EOF
  chmod a+x "${cosy_bin_uninstall}"

  cat > "${cosy_bin_check}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
(
  if [ \$# -ge 1 ]; then
    tmpdir=\${1}
  else
    tmpdir=\$(mktemp -d 2>/dev/null || mktemp -d -t cosy-check)
  fi
  if [ ! -d "\${tmpdir}" ]; then
    mkdir -p "\${tmpdir}"
  fi
  shift
  cd  "\${tmpdir}" || exit 1
  "\${COSY_PREFIX}/bin/cosy-server" start --force --clean
  luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/check/init.lua" "\$@"
  "\${COSY_PREFIX}/bin/cosy-server" stop  --force
  echo
  echo -e "Test and Coverage reports are in ${green}\${tmpdir}${nc}."
)
EOF
  chmod a+x "${cosy_bin_check}"
}

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}

git submodule init
git submodule update
mkdir -p "${cosy_prefix}"
mkdir -p "${cosy_prefix}/bin"
mkdir -p "${cosy_prefix}/lib"
trap error ERR
install_dependencies
install_luajit
install_openresty
install_luarocks
install_cosyverif
install_bin

echo "You can now try the following commands:"
echo "- ${cosy_prefix}/bin/cosy-server start [--clean] [--force]"
echo "- ${cosy_prefix}/bin/cosy-server stop  [--force]"
echo "- ${cosy_prefix}/bin/cosy            : to run the cosy client"
echo "- ${cosy_prefix}/bin/cosy-version    : to get version number"
echo "- ${cosy_prefix}/bin/cosy-uninstall  : to uninstall cosy"
echo "The development environment also provides two commands:"
echo "- ${cosy_prefix}/bin/cosy-check    : to run checks, tests and coverage"
echo "- ${cosy_prefix}/bin/cosy-rockspec : to generate rockspec"

if [ ! -z "${in_ci+x}" ]; then
  cat "${cosy_log}"
fi
