#! /bin/bash

## check for command line arguments
##  --sourcepath=<SOURCEPATH>
##          eg   ./install --sourcepath=$HOME
##          Use this option if you are a cosy developper.
##           This install bash will make a     ln -s ${SOURCEPATH}/library/src/cosy   ${rockstree}/share/lua/5.1/
##            instead of a classic             cp -r  ${tempwd}/library/src/cosy   ${rockstree}/share/lua/5.1/
##  --prefix=<PREFIX>
##          eg   ./install --prefix=$HOME
##          Use this option if you are a cosy user.
##
##  A user wants to install a client version  :
##      install --prefix=${TARGET_PATH} --client
##      install --prefix=${TARGET_PATH}
##      install ${TARGET_PATH}
##
##  A user wants to install a server version  :
##      install --prefix=${TARGET_PATH} --server
##
##  A developper wants to install a server version  :
##      install --sourcepath=${TARGET_DEV_PATH} --server
##
##  A developper wants to install a client version  :
##      install --sourcepath=${TARGET_DEV_PATH} --client
##      install --sourcepath=${TARGET_DEV_PATH}
##
###############################################################################################
for i in "$@"
do
  case ${i} in
    -s=*|--sourcepath=*)
      sourcepath="${i#*=}"
      shift # past argument=value
    ;;
    -p=*|--prefix=*)
      prefix="${i#*=}"
      shift # past argument=value
    ;;
    -m=*|--mode=*)
      mode="${i#*=}"
      shift # past argument=value
    ;;
    -h|--help)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH]"
      exit 1;
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH]"
      exit 1;
      # unknown option
    ;;
  esac
done

prefix=${prefix:-/usr/local}
mode=${mode:-server}

red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'

## Now cmd args have been parsed
##################################
versions="5.2"
cosy=${prefix}/bin/cosy
check=${prefix}/bin/cosy-check
rockspec=${prefix}/bin/cosy-rockspec
rockstree=${prefix}/local/cosy
currentwd=$(pwd)
tempwd=$(mktemp -d)
log=$(mktemp)

echo -e "Temporary directory: ${green}${tempwd}${nc}"
echo -e "Log file           : ${green}${log}${nc}"
echo -e "Mode               :  ${green}${mode}${nc}"
echo -e "Prefix             :  ${green}${prefix}${nc}"
if [ -z "${sourcepath+x}" ]; then
  echo -e "Source             : ${green}not set${nc}"
else
  echo -e "Source             : ${green}${sourcepath}${nc}"
fi

# Install dependencies:
function install_dependencies ()
{
  echo "Installing packages required by both client and server"
  sudo apt-get install --yes git make gcc diffutils patch wget unzip \
    >> "${log}" 2>&1

  echo "Installing packages required only by the server"
  sudo apt-get install --yes libev-dev libssl-dev \
                             nginx-extras redis-server imagemagick \
    >> "${log}" 2>&1

  if [ ! -z "${sourcepath+x}" ]; then
    for version in ${versions}
    do
      echo "Installing lua-${version}"
      sudo apt-get install --yes  lua${versions} liblua${version}-dev \
        >> "${log}" 2>&1
    done
  fi
}

# Install LuaJIT with 5.2 compatibility:
function install_luajit ()
{
  echo "Installing luajit"
  wget --quiet http://luajit.org/download/LuaJIT-2.0.4.tar.gz
  tar  xf LuaJIT-2.0.4.tar.gz
  cd   LuaJIT-2.0.4
  cat > luajit.patch <<EOL
diff -rupN LuaJIT-2.0.4.back/Makefile LuaJIT-2.0.4/Makefile
--- LuaJIT-2.0.4.back/Makefile	2015-10-02 17:19:16.774268017 +0200
+++ LuaJIT-2.0.4/Makefile	2015-10-02 17:11:14.533865635 +0200
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+export PREFIX= ${rockstree}/5.1
 export MULTILIB= lib
 ##############################################################################

diff -rupN LuaJIT-2.0.4.back/src/Makefile LuaJIT-2.0.4/src/Makefile
--- LuaJIT-2.0.4.back/src/Makefile	2015-10-02 17:19:06.294172164 +0200
+++ LuaJIT-2.0.4/src/Makefile	2015-10-02 17:18:50.882031189 +0200
@@ -100,7 +100,7 @@ XCFLAGS=
 # enabled by default. Some other features that *might* break some existing
 # code (e.g. __pairs or os.execute() return values) can be enabled here.
 # Note: this does not provide full compatibility with Lua 5.2 at this time.
-#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
+XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
 #
 # Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.
 #XCFLAGS+= -DLUAJIT_DISABLE_JIT
EOL
  {
    patch -p1 -i luajit.patch
    make
    make install
  } >> "${log}" 2>&1
  cd   ..
}

function install_luarocks ()
{
  echo "Installing luarocks"
  wget --quiet http://luarocks.org/releases/luarocks-2.2.2.tar.gz
  tar  xf luarocks-2.2.2.tar.gz
  cd   luarocks-2.2.2
  {
    ./configure --prefix="${rockstree}/5.1" \
                --with-lua="${rockstree}/5.1" \
                --lua-suffix="jit" \
                --with-lua-include="${rockstree}/5.1/include/luajit-2.0/" \
                --with-lua-lib="${rockstree}/5.1/lib/"
      make bootstrap
  } >> "${log}" 2>&1
  cd   ..

  if [ ! -z "${sourcepath+x}" ]; then
    (
      cd   luarocks-2.2.2 || exit
      for version in ${versions}
      do
        echo "Installing luarocks for Lua-${version}"
        {
          make clean
          ./configure --prefix="${rockstree}/${version}" \
                      --lua-version="${version}" \
                      --lua-suffix="${version}"
          make bootstrap
        } >> "${log}" 2>&1
      done
    )
  fi

}

# Install cosyverif:
function install_cosyverif ()
{
  git clone https://github.com/saucisson/lua-websockets.git \
    >> "${log}" 2>&1
  git clone https://github.com/nrk/redis-lua.git \
    >> "${log}" 2>&1
  for version in 5.1 ${versions}
  do
    echo "Installing cosyverif dependencies for Lua-${version}"
    if [ -d "${rockstree}/${version}/share/lua/${version}" ]
    then
      "${rockstree}/${version}/bin/luarocks" install cosyverif \
        >> "${log}" 2>&1
      rm -rf "${rockstree}/${version}/share/lua/${version}/redis"*
      cp     "${tempwd}/redis-lua/src/redis.lua"          "${rockstree}/${version}/share/lua/${version}/"
      rm -rf "${rockstree}/${version}/share/lua/${version}/websocket"*
      cp     "${tempwd}/lua-websockets/src/websocket.lua" "${rockstree}/${version}/share/lua/${version}/"
      cp -r  "${tempwd}/lua-websockets/src/websocket"     "${rockstree}/${version}/share/lua/${version}/"
      rm -rf "${rockstree}/${version}/share/lua/${version}/cosy"*
    fi
    ###### 20151007 in order to be able to use your cosy sources that you are editing
    if [ -z "${sourcepath+x}" ]; then
      ## In the standard user mode : get the official version of cosy
      git clone https://github.com/CosyVerif/library.git \
        >> "${log}" 2>&1
      cp -r  "${tempwd}/library/src/cosy"   "${rockstree}/${version}/share/lua/${version}/"
    else
      echo "Linking cosy to ${sourcepath}"
      ## In the developper mode : use the version of cosy provided by the sourcepath
      ln -s "${sourcepath}/src/cosy"        "${rockstree}/${version}/share/lua/${version}/"
    fi
    if [ ! -z "${sourcepath+x}" ]; then
      echo "Installing development tools"
      {
        "${rockstree}/${version}/bin/luarocks" install luacheck
        "${rockstree}/${version}/bin/luarocks" install luacov
        "${rockstree}/${version}/bin/luarocks" install busted
      } >> "${log}" 2>&1
    fi
  done

}

function install_main ()
{
  read -d '' paths <<EOF
export PATH="${prefix}/bin:${rockstree}/5.1/bin:\${PATH}"
export LUA_PATH="${rockstree}/5.1/share/lua/5.1/?.lua;${rockstree}/5.1/share/lua/5.1/?/init.lua"
export LUA_CPATH="${rockstree}/5.1/lib/lua/5.1/?.so"
EOF

  echo
  echo -e "You should now add the following path variables to your environment (${green}.bashrc${nc} or ${green}.profile${nc})"
  echo "${paths}"
  echo
  cat > "${cosy}" <<EOF
#! /bin/sh

${paths}
export COSY_PREFIX="${prefix}"

${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/cli/init.lua "\$@"
EOF
  chmod a+x "${cosy}"

  if [ ! -z "${sourcepath+x}" ]; then
    cat > "${check}" <<EOF
#! /bin/bash

${paths}
export COSY_PREFIX="${prefix}"

(
  tmpdir=\${1:-\$(mktemp -d)}
  shift
  cd  "\${tmpdir}" || exit
  ${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/check/init.lua "\$@"
  echo
  echo -e "Test and Coverage reports are in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${check}"

    cat > "${rockspec}" <<EOF
#! /bin/bash

${paths}
export COSY_PREFIX="${prefix}"

(
  tmpdir=\${1:-\$(mktemp -d)}
  shift
  cd  "\${tmpdir} "|| exit
  ${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/rockspec/init.lua "\$@"
  echo
  echo -e "Rockspec is in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${rockspec}"
  fi
}

function install_configuration ()
{
  echo -e "Installing configuration in ${green}${prefix}/etc/cosy.conf${nc}"
  mkdir -p "${prefix}/etc"
  cat > "${prefix}/etc/cosy.conf" <<EOL
return {
  http  = {
    nginx = "/usr/sbin/nginx",
    port  = 8080,
  },
  cli = {
    server = "http://127.0.0.1:8080/"
  },
}
EOL
}

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${log}${nc}."
  exit 1
}
trap error ERR

mkdir -p "${prefix}"
mkdir -p "${prefix}/bin"
cd "${tempwd}"
install_dependencies
install_luajit
install_luarocks
install_cosyverif
install_main
install_configuration
cd "${currentwd}"
rm -rf "${tempwd}"
rm -f  "${log}"

echo "You can now run cosy commands using: ${prefix}/bin/cosy"
