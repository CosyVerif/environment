#! /bin/bash

## check for command line arguments
##  --sourcepath=<SOURCEPATH>
##          eg   ./install --sourcepath=$HOME
##          Use this option if you are a cosy developper.
##           This install bash will make a     ln -s ${SOURCEPATH}/library/src/cosy   ${rockstree}/share/lua/5.1/
##            instead of a classic             cp -r  ${tempwd}/library/src/cosy   ${rockstree}/share/lua/5.1/
##  --prefix=<PREFIX>
##          eg   ./install --prefix=$HOME
##          Use this option if you are a cosy user.
##
##  A user wants to install a client version  :
##      install --prefix=${TARGET_PATH} --client
##      install --prefix=${TARGET_PATH}
##      install ${TARGET_PATH}
##
##  A user wants to install a server version  :
##      install --prefix=${TARGET_PATH} --server
##
##  A developper wants to install a server version  :
##      install --sourcepath=${TARGET_DEV_PATH} --server
##
##  A developper wants to install a client version  :
##      install --sourcepath=${TARGET_DEV_PATH} --client
##      install --sourcepath=${TARGET_DEV_PATH}
##
###############################################################################################
for i in "$@"
do
case $i in
    -s=*|--sourcepath=*)
    SOURCEPATH="${i#*=}"
    shift # past argument=value
    ;;
    -p=*|--prefix=*)
    PREFIX="${i#*=}"
    shift # past argument=value
    ;;
    -s=*|--server*)
    SERVER=true
    MODE="SERVER"
    shift # past argument=value
    ;;
    -s=*|--client*)
    CLIENT=true
    MODE="CLIENT"
    shift # past argument=value
    ;;
    *)
            # unknown option
    ;;
esac
done

echo "SOURCEPATH='${SOURCEPATH}'"
echo "PREFIX='${PREFIX}'"
echo "SERVER='${SERVER}'"
echo "CLIENT='${CLIENT}'"
echo "MODE='${MODE}'"


if [ ! -z ${SERVER+x} ] && [ ! -z ${CLIENT+x} ]; then
  echo "FATAL: incompatible options --server and --client'"
  echo "Usages: "
  echo "     install --prefix=\${TARGET_PATH} --client"
  echo "     install --prefix=\${TARGET_PATH} --server"
  echo "     install --sourcepath=\${TARGET_PATH} --server"
  exit 1;
else
  echo "SERVER or CLIENT is unset";
fi

if [ -z ${SERVER+x} ] && [ -z ${CLIENT+x} ]; then
  echo "Setting CLIENT mode";
  CLIENT=true
  MODE="CLIENT"
else
  echo "SERVER or CLIENT set";
fi

if [ -z ${SOURCEPATH+x} ]; then
  echo "SOURCEPATH is unset";
else
  echo "SOURCEPATH is set to  '${SOURCEPATH}'";
fi

if [ ! -z ${SOURCEPATH+x} ] && [ ! -z ${PREFIX+x} ]; then
  echo "FATAL: incompatible options --sourcepath and --prefix'"
  echo "FATAL: incompatible options SOURCEPATH is set to  '${SOURCEPATH}' AND PREFIX is set to '${PREFIX}'"
  exit 1;
else
  echo "SOURCEPATH or PREFIX is unset";
fi

if [ -z ${PREFIX+x} ]; then
  echo "PREFIX is unset";
else
  prefix=${PREFIX}
  echo "Setting a user version to path '${prefix}'";
  echo "PREFIX is set to  '${PREFIX}'";
fi
if [ -z ${SOURCEPATH+x} ] && [ -z ${PREFIX+x} ]; then
  echo "both SOURCEPATH  and PREFIX are unset"
  prefix=/usr/local
  echo "setting prefix to '${prefix}'";
fi
if [ ! -z ${SOURCEPATH+x} ]; then
  prefix=${SOURCEPATH}
  echo "Setting a development version to path '{$prefix}'";
else
  if [ ! -z ${PREFIX+x}  ]; then
    prefix=${PREFIX}
    echo "Setting a user version to path '${prefix}'";
  else
    prefix=/usr/local/
    echo "Setting a user version to the path '${prefix}'";
  fi
fi


## Now cmd args have been parsed
##################################
echo ${MODE}
echo ${prefix}


binary=${prefix}/bin/cosy
rockstree=${prefix}/local/cosy
currentwd=$(pwd)
tempwd=$(mktemp -d)
log=$(mktemp)

# Install dependencies:
function install_dependencies ()
{
  echo "Installing packages required by both client and server"
  sudo apt-get install --yes git make gcc diffutils patch wget unzip

#  echo "Installing packages required only by the server"
  sudo apt-get install --yes libev-dev libssl-dev libgeoip-dev libmagickwand-dev \
                             nginx-extras redis-server
}

# Install LuaJIT with 5.2 compatibility:
function install_luajit ()
{
  wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz
  tar  xf LuaJIT-2.0.4.tar.gz
  cd   LuaJIT-2.0.4
  cat > luajit.patch <<EOL
diff -rupN LuaJIT-2.0.4.back/Makefile LuaJIT-2.0.4/Makefile
--- LuaJIT-2.0.4.back/Makefile	2015-10-02 17:19:16.774268017 +0200
+++ LuaJIT-2.0.4/Makefile	2015-10-02 17:11:14.533865635 +0200
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+export PREFIX= ${rockstree}
 export MULTILIB= lib
 ##############################################################################

diff -rupN LuaJIT-2.0.4.back/src/Makefile LuaJIT-2.0.4/src/Makefile
--- LuaJIT-2.0.4.back/src/Makefile	2015-10-02 17:19:06.294172164 +0200
+++ LuaJIT-2.0.4/src/Makefile	2015-10-02 17:18:50.882031189 +0200
@@ -100,7 +100,7 @@ XCFLAGS=
 # enabled by default. Some other features that *might* break some existing
 # code (e.g. __pairs or os.execute() return values) can be enabled here.
 # Note: this does not provide full compatibility with Lua 5.2 at this time.
-#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
+XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
 #
 # Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.
 #XCFLAGS+= -DLUAJIT_DISABLE_JIT
EOL
  patch -p1 -i luajit.patch
  make
  make install
  cd   ..
}

function install_luarocks ()
{
  wget http://luarocks.org/releases/luarocks-2.2.2.tar.gz
  tar  xf luarocks-2.2.2.tar.gz
  cd   luarocks-2.2.2
  ./configure --prefix=${rockstree} \
              --with-lua=${rockstree} \
              --lua-suffix="jit" \
              --with-lua-include=${rockstree}/include/luajit-2.0/ \
              --with-lua-lib=${rockstree}/lib/
  make bootstrap
  cd   ..
}

# Install cosyverif:
function install_cosyverif ()
{
  git clone https://github.com/saucisson/lua-websockets.git
  git clone https://github.com/nrk/redis-lua.git
  git clone https://github.com/leafo/magick.git
  ${rockstree}/bin/luarocks install --tree=${rockstree} cosyverif
  rm -rf ${rockstree}/share/lua/5.1/redis*
  cp     ${tempwd}/redis-lua/src/redis.lua          ${rockstree}/share/lua/5.1/
  rm -rf ${rockstree}/share/lua/5.1/websocket*
  cp     ${tempwd}/lua-websockets/src/websocket.lua ${rockstree}/share/lua/5.1/
  cp -r  ${tempwd}/lua-websockets/src/websocket     ${rockstree}/share/lua/5.1/
  rm -rf ${rockstree}/share/lua/5.1/magick*
  cp -r  ${tempwd}/magick/magick                    ${rockstree}/share/lua/5.1/
  rm -rf ${rockstree}/share/lua/5.1/cosy*
###### 20151007 in order to be able to use your cosy sources that you are editing
  if [ -z ${SOURCEPATH+x} ]; then
    echo "Setting a user version to path ${tempwd}/library/src/cosy"
    ## In the standard user mode : get the official version of cosy
    git clone https://github.com/CosyVerif/library.git
    cp -r  ${tempwd}/library/src/cosy                 ${rockstree}/share/lua/5.1/
    echo "SOURCEPATH is unset";
  else
    echo "Setting a development version to path '{$SOURCEPATH}'"
    ## In the developper mode : use the version of cosy provided by the SOURCEPATH
    ln -s ${SOURCEPATH}/library/src/cosy                          ${rockstree}/share/lua/5.1/
    echo "SOURCEPATH is set to '${SOURCEPATH}'";
  fi

}

function install_main ()
{
echo "WARNING : You should now add the following path variables to your environment (.bashrc)"
echo "export PATH=\"${prefix}/local/cosy/bin:${rockstree}/bin:${PATH}\""
echo "export LUA_PATH=\"${rockstree}/share/lua/5.1/?.lua;${rockstree}/share/lua/5.1/?/init.lua\""
echo "export PATH=\"${prefix}/local/cosy/bin:${rockstree}/bin:${PATH}\""

  cat > ${binary} <<EOL
#! /bin/sh

export PATH="${prefix}/local/cosy/bin:${rockstree}/bin:${PATH}"
export LUA_PATH="${rockstree}/share/lua/5.1/?.lua;${rockstree}/share/lua/5.1/?/init.lua"
export LUA_CPATH="${rockstree}/lib/lua/5.1/?.so"
export COSY_PREFIX="${prefix}"

${rockstree}/bin/luajit ${rockstree}/share/lua/5.1/cosy/cli/init.lua \$*
EOL
  chmod a+x ${binary}
}

function install_configuration ()
{
  mkdir -p ${prefix}/etc
  cat > ${prefix}/etc/cosy.conf <<EOL
return {
  http  = {
    nginx = "/usr/sbin/nginx",
    port  = 8080,
  },
  cli = {
    server = "http://127.0.0.1:8080/"
  },
}
EOL
}

function error ()
{
  echo "An error happened."
  echo "Please read log file: ${log}"
  exit 1
}
trap error ERR

mkdir -p ${prefix}
mkdir -p ${prefix}/bin
cd ${tempwd}
echo "Installing dependencies..."
install_dependencies  >> ${log} 2>&1
echo "Installing luajit..."
install_luajit        >> ${log} 2>&1
echo "Installing luarocks..."
install_luarocks      >> ${log} 2>&1
echo "Installing cosyverif..."
install_cosyverif     >> ${log} 2>&1
echo "Installing launcher..."
install_main          >> ${log} 2>&1
echo "Installing configuration..."
install_configuration >> ${log} 2>&1
cd ${currentwd}
rm -rf ${tempwd}
rm -f  ${log}

echo "You can now run cosy commands using: ${prefix}/bin/cosy"
