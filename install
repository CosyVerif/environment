#! /bin/bash

## check for command line arguments
##  --sourcepath=<SOURCEPATH>
##          eg   ./install --sourcepath=$HOME
##          Use this option if you are a cosy developper.
##           This install bash will make a     ln -s ${SOURCEPATH}/library/src/cosy   ${rockstree}/share/lua/5.1/
##            instead of a classic             cp -r  ${tempwd}/library/src/cosy   ${rockstree}/share/lua/5.1/
##  --prefix=<PREFIX>
##          eg   ./install --prefix=$HOME
##          Use this option if you are a cosy user.
##
##  A user wants to install a client version  :
##      install --prefix=${TARGET_PATH} --client
##      install --prefix=${TARGET_PATH}
##      install ${TARGET_PATH}
##
##  A user wants to install a server version  :
##      install --prefix=${TARGET_PATH} --server
##
##  A developper wants to install a server version  :
##      install --sourcepath=${TARGET_DEV_PATH} --server
##
##  A developper wants to install a client version  :
##      install --sourcepath=${TARGET_DEV_PATH} --client
##      install --sourcepath=${TARGET_DEV_PATH}
##
###############################################################################################
for i in "$@"
do
  case ${i} in
    -s=*|--sourcepath=*)
      sourcepath="${i#*=}"
      sourcepath=${sourcepath%/}
      shift # past argument=value
    ;;
    -p=*|--prefix=*)
      prefix="${i#*=}"
      prefix=${prefix%/}
      shift # past argument=value
    ;;
    -m=*|--mode=*)
      mode="${i#*=}"
      shift # past argument=value
    ;;
    --in-ci)
    in_ci=true
    shift # past argument=value
    ;;
    -h|--help)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH] [--in-ci]"
      exit 1;
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH] [--in-ci]"
      exit 1;
      # unknown option
    ;;
  esac
done

prefix=${prefix:-/usr/local}
mode=${mode:-server}

red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'

## Now cmd args have been parsed
##################################

versions="5.2"
cli=${prefix}/bin/cosy
server=${prefix}/bin/cosy-server
uninstall=${prefix}/bin/cosy-uninstall
check=${prefix}/bin/cosy-check
rockspec=${prefix}/bin/cosy-rockspec
rockstree=${prefix}/local/cosy
currentwd=$(pwd)
tempwd=$(mktemp -d)
log=$(mktemp)
if [ "${mode}" == "server" ]; then
  dependencies="\
    ansicolors \
    argparse \
    bcrypt \
    bit32 \
    copas-ev \
    coronest \
    dkjson \
    hotswap \
    hotswap-ev \
    hotswap-http \
    i18n \
    jwt \
    layeredata \
    lua-cjson \
    lua-ev \
    lua-resty-http \
    luacrypto \
    luafilesystem \
    lualogging \
    luasec \
    luasocket \
    lustache \
    md5 \
    serpent \
  "
else
  dependencies="\
    copas-ev \
    hotswap-ev \
    hotswap-http \
    lua-cjson \
    luafilesystem \
    luasec \
    luasocket \
  "
fi

echo -e "Temporary directory: ${green}${tempwd}${nc}"
echo -e "Log file           : ${green}${log}${nc}"
echo -e "Mode               :  ${green}${mode}${nc}"
echo -e "Prefix             :  ${green}${prefix}${nc}"
if [ -z "${sourcepath+x}" ]; then
  echo -e "Source             : ${green}not set${nc}"
else
  echo -e "Source             : ${green}${sourcepath}${nc}"
fi

# Stop existing server:
function stop_server ()
{
  if [ -e "${server}" ]; then
    echo "Stopping running server."
    {
      ${server} stop --force
      ${cli} daemon:stop --force
    } >> "${log}" 2>&1
  fi
}

# Install dependencies:
function install_dependencies ()
{
  # check if apt is available:
  if command -v apt-get; then
    if sudo apt-get update; then
      apt_available=true
    fi
  fi >> "${log}" 2>&1

  if [ ! -z "${apt_available+x}" ]; then
    echo "Installing packages required by both client and server."
    sudo apt-get install --yes git make gcc diffutils patch curl unzip \
      >> "${log}" 2>&1

    if [ "${mode}" == "server" ]; then
      echo "Installing packages required only by the server."
      sudo apt-get install --yes perl build-essential \
                                 libreadline-dev libncurses5-dev libpcre3-dev \
                                 redis-server imagemagick \
        >> "${log}" 2>&1
    fi
  else
    echo "Not installing packages as apt-get or sudo is not available."
  fi

  if [ ! -z "${sourcepath+x}" ]; then
    if [ -z "${apt_available+x}" ]; then
      echo "Developper mode requires a working version of apt and sudo."
    else
      for version in ${versions}
      do
        echo "Installing lua-${version}."
        sudo apt-get install --yes lua${versions} liblua${version}-dev \
          >> "${log}" 2>&1
      done
      echo "Installing developper tools."
      if [ "$(apt-cache search shellcheck | grep shellcheck)" != "" ]; then
        sudo apt-get install --yes shellcheck \
          >> "${log}" 2>&1
      fi
    fi
  fi
}

# Install libev:
function install_libev()
{
  echo "Installing libev."
  (
  git clone "https://github.com/enki/libev.git"
  cd libev
  ./configure --prefix="${prefix}"
  make install
  ) >> "${log}" 2>&1
}

# Install libssl:
function install_libssl ()
{
  echo "Installing libssl."
  (
  git clone "https://github.com/openssl/openssl.git" 
  cd openssl
  git checkout "OpenSSL_1_0_2-stable"
  ./config --prefix="${prefix}"
  make install
  ) >> "${log}" 2>&1
}

# Install LuaJIT with 5.2 compatibility:
function install_luajit ()
{
  if [ -e "${rockstree}/5.1/bin/luajit" ]; then
    echo "Luajit is already installed."
    return
  fi
  echo "Installing luajit."
  curl --location --silent -O http://luajit.org/download/LuaJIT-2.1.0-beta1.tar.gz
  tar  xf LuaJIT-2.1.0-beta1.tar.gz
  cd   LuaJIT-2.1.0-beta1
  cat > luajit.patch <<EOL
diff -rupN LuaJIT-2.0.4.back/Makefile LuaJIT-2.0.4/Makefile
--- LuaJIT-2.0.4.back/Makefile	2015-10-02 17:19:16.774268017 +0200
+++ LuaJIT-2.0.4/Makefile	2015-10-02 17:11:14.533865635 +0200
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+export PREFIX= ${rockstree}/5.1
 export MULTILIB= lib
 ##############################################################################

diff -rupN LuaJIT-2.0.4.back/src/Makefile LuaJIT-2.0.4/src/Makefile
--- LuaJIT-2.0.4.back/src/Makefile	2015-10-02 17:19:06.294172164 +0200
+++ LuaJIT-2.0.4/src/Makefile	2015-10-02 17:18:50.882031189 +0200
@@ -100,7 +100,7 @@ XCFLAGS=
 # enabled by default. Some other features that *might* break some existing
 # code (e.g. __pairs or os.execute() return values) can be enabled here.
 # Note: this does not provide full compatibility with Lua 5.2 at this time.
-#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
+XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
 #
 # Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.
 #XCFLAGS+= -DLUAJIT_DISABLE_JIT
EOL
  {
    patch -p1 -i luajit.patch
    make
    make install
  } >> "${log}" 2>&1
  cd   ..
  ln -sf "${rockstree}/5.1/bin/luajit-2.1.0-beta1" "${rockstree}/5.1/bin/luajit"
  ln -sf "${rockstree}/5.1/include/luajit-2.1"     "${rockstree}/5.1/include/luajit-2.0"
}

# Install openresty:
function install_openresty ()
{
  if [ "${mode}" == "server" ]; then
    echo "Installing openresty required only by the server."
    if [ -e "${prefix}/bin/resty" ]; then
      echo "Openresty is already installed."
      return
    fi
    echo "Installing openresty."
    (
      curl --location --silent -O https://openresty.org/download/ngx_openresty-1.9.3.1.tar.gz
      tar xf ngx_openresty-1.9.3.1.tar.gz
      cd ngx_openresty-1.9.3.1
      ./configure --prefix="${prefix}" \
                  --without-lua51 \
                  --with-luajit="${rockstree}/5.1" \
                  --with-ipv6 \
                  --with-pcre-jit
      make
      make install
    ) >> "${log}" 2>&1
  fi
}

function install_luarocks ()
{
  if [ -e "${rockstree}/5.1/bin/luarocks" ]; then
    echo "Luarocks for lua-5.1 is already installed."
  else
  (
    echo "Installing luarocks for Lua-5.1."
    curl --location --silent -O http://luarocks.org/releases/luarocks-2.2.2.tar.gz
    tar  xf luarocks-2.2.2.tar.gz
    cd   luarocks-2.2.2
    {
      ./configure --prefix="${rockstree}/5.1" \
                  --with-lua="${rockstree}/5.1" \
                  --lua-suffix="jit" \
                  --with-lua-include="${rockstree}/5.1/include/luajit-2.0/" \
                  --with-lua-lib="${rockstree}/5.1/lib/"
        make bootstrap
    } >> "${log}" 2>&1
  )
  fi

  if [ ! -z "${sourcepath+x}" ]; then
    for version in ${versions}
    do
      if [ -e "${rockstree}/${version}/bin/luarocks" ]; then
        echo "Luarocks for lua-${version} is already installed."
      else
      (
        echo "Installing luarocks for lua-${version}."
        if [ ! -d luarocks-2.2.2 ]; then
          curl --location --silent -O http://luarocks.org/releases/luarocks-2.2.2.tar.gz
          tar  xf luarocks-2.2.2.tar.gz
        fi
        cd   luarocks-2.2.2
        {
          make clean
          ./configure --prefix="${rockstree}/${version}" \
                      --lua-version="${version}" \
                      --lua-suffix="${version}"
          make bootstrap
        } >> "${log}" 2>&1
      )
      fi
    done
  fi

}

# Install cosyverif:
function install_cosyverif ()
{
  mkdir -p "${rockstree}/git"
  if [ ! -d "${rockstree}/git/redis-lua" ]; then
    git clone https://github.com/nrk/redis-lua.git \
              "${rockstree}/git/redis-lua" \
      >> "${log}" 2>&1
  fi
  (
    cd "${rockstree}/git/redis-lua"
    git pull \
      >> "${log}" 2>&1
  )
  if [ ! -d "${rockstree}/git/lua-websockets" ]; then
    git clone https://github.com/saucisson/lua-websockets.git \
              "${rockstree}/git/lua-websockets" \
      >> "${log}" 2>&1
  fi
  (
    cd "${rockstree}/git/lua-websockets"
    git pull \
      >> "${log}" 2>&1
  )
  if [ -z "${sourcepath+x}" ]; then
    if [ ! -d "${rockstree}/git/library" ]; then
      rm -rf "${rockstree}/git/library"
      git clone https://github.com/CosyVerif/library.git \
                "${rockstree}/git/library" \
        >> "${log}" 2>&1
    fi
    (
      cd "${rockstree}/git/library"
      git pull \
        >> "${log}" 2>&1
    )
  else
    rm -rf "${rockstree}/git/library"
    ln -s  "${sourcepath}" \
           "${rockstree}/git/library"

  fi
  for version in 5.1 ${versions}
  do
    echo "Installing rocks for lua-${version}."
    if [ -d "${rockstree}/${version}/share/lua/${version}" ]; then
      # Remove symlink to cosy to avoid modification of ${sourcepath} files by luarocks.
      rm -rf "${rockstree}/${version}/share/lua/${version}/redis"*
      rm -rf "${rockstree}/${version}/share/lua/${version}/websocket"*
      rm -rf "${rockstree}/${version}/share/lua/${version}/cosy"*
      # Install luasec before everything to allow the use of HTTPS in luarocks:
      for dependency in luasec ${dependencies}; do
        if "${rockstree}/${version}/bin/luarocks" list --porcelain | grep "${dependency}"; then
          echo -n
        else
          "${rockstree}/${version}/bin/luarocks" install "${dependency}"
        fi
      done >> "${log}" 2>&1
      # Create symlinks in rockstree:
      rm -rf "${rockstree}/${version}/share/lua/${version}/redis"*
      ln -s  "${rockstree}/git/redis-lua/src/redis.lua" \
             "${rockstree}/${version}/share/lua/${version}/redis.lua"
      rm -rf "${rockstree}/${version}/share/lua/${version}/websocket"*
      ln -s  "${rockstree}/git/lua-websockets/src/websocket.lua" \
             "${rockstree}/${version}/share/lua/${version}/websocket.lua"
      ln -s  "${rockstree}/git/lua-websockets/src/websocket" \
             "${rockstree}/${version}/share/lua/${version}/websocket"
      ln -s  "${rockstree}/git/library/src/cosy" \
             "${rockstree}/${version}/share/lua/${version}/cosy"
    fi
    if [ ! -z "${sourcepath+x}" ]; then
      echo "Installing development tools for lua-${version}."
      for module in luacheck luacov busted; do
        if "${rockstree}/${version}/bin/luarocks" list --porcelain | grep "${module}"; then
          echo -n
        else
          "${rockstree}/${version}/bin/luarocks" install "${module}"
        fi
      done >> "${log}" 2>&1
    fi
  done
}

function install_main ()
{
  read -d '' paths <<EOF
export PATH="${prefix}/bin:${rockstree}/5.1/bin:\${PATH}"
export LUA_PATH="${rockstree}/5.1/share/lua/5.1/?.lua;${rockstree}/5.1/share/lua/5.1/?/init.lua"
export LUA_CPATH="${rockstree}/5.1/lib/lua/5.1/?.so"
EOF

  cat > "${cli}" <<EOF
#! /bin/sh

${paths}
export COSY_PREFIX="${prefix}"

${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/cli/runner.lua "\$@"
EOF
  chmod a+x "${cli}"

if [ "${mode}" == "server" ]; then
  cat > "${server}" <<EOF
#! /bin/sh
  
${paths}
export COSY_PREFIX="${prefix}"
  
${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/server/cli.lua "\$@"
EOF
  chmod a+x "${server}"
fi
  
  cat > "${uninstall}" <<EOF
#! /bin/bash

${paths}
export COSY_PREFIX="${prefix}"
if [ -e "${prefix}/bin/cosy-server" ]; then
  ${prefix}/bin/cosy-server stop --force
fi
rm -rf ${prefix}/bin/cosy* \
       ${prefix}/bin/resty \
       ${prefix}/etc/cosy* \
       ${prefix}/lualib \
       ${prefix}/nginx \
       ${prefix}/local/cosy
find ${prefix} -maxdepth 1 -empty -exec rm -rf {} \;
find ${prefix} -maxdepth 0 -empty -exec rm -rf {} \;
echo -e "Cosy has been ${green}successfully uninstalled${nc}."
EOF
  chmod a+x "${uninstall}"

  if [ ! -z "${sourcepath+x}" ]; then
    cat > "${check}" <<EOF
#! /bin/bash

${paths}
export COSY_PREFIX="${prefix}"

(
  if [ \$# -ge 1 ]; then
    tmpdir=\${1}
  else
    tmpdir=\$(mktemp -d)
  fi
  if [ ! -d "\${tmpdir}" ]; then
    mkdir -p "\${tmpdir}"
  fi
  shift
  cd  "\${tmpdir}"
  ${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/check/init.lua "\$@"
  echo
  echo -e "Test and Coverage reports are in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${check}"

    cat > "${rockspec}" <<EOF
#! /bin/bash

${paths}
export COSY_PREFIX="${prefix}"

(
  if [ \$# -ge 1 ]; then
    tmpdir=\${1}
  else
    tmpdir=\$(mktemp -d)
  fi
  if [ ! -d "\${tmpdir}" ]; then
    mkdir -p "\${tmpdir}"
  fi
  shift
  cd  "\${tmpdir}"
  ${rockstree}/5.1/bin/luajit ${rockstree}/5.1/share/lua/5.1/cosy/rockspec/init.lua "\$@"
  echo
  echo -e "Rockspec is in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${rockspec}"
  fi
}

function install_configuration ()
{
  echo -e "Installing configuration in ${green}${prefix}/etc/cosy.conf${nc}."
  mkdir -p "${prefix}/etc"
  cat > "${prefix}/etc/cosy.conf" <<EOL
return {
  http  = {
    nginx = "/usr/sbin/nginx",
    port  = 8080,
  },
  cli = {
    server = "http://127.0.0.1:8080/"
  },
}
EOL
}

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${log}"
  fi
  exit 1
}

mkdir -p "${prefix}"
mkdir -p "${prefix}/bin"
cd "${tempwd}"
stop_server
trap error ERR
install_dependencies
install_libev
install_libssl
install_luajit
install_openresty
install_luarocks
install_cosyverif
install_main
install_configuration
cd "${currentwd}"

echo "You can now try the following commands:"
if [ "${mode}" == "server" ]; then
  echo "- ${prefix}/bin/cosy-server start [--clean] [--force]"
  echo "- ${prefix}/bin/cosy-server stop  [--force]"
fi
echo "- ${prefix}/bin/cosy"
echo "- ${prefix}/bin/cosy-uninstall"
if [ ! -z "${sourcepath+x}" ]; then
  echo "This development environment also provides two commands:"
  echo "- ${prefix}/bin/cosy-check    : to run checks, tests and coverage"
  echo "- ${prefix}/bin/cosy-rockspec : to generate rockspec"
fi

if [ ! -z "${in_ci+x}" ]; then
  cat "${log}"
else
  rm -rf "${tempwd}"
  rm -f  "${log}"
fi
