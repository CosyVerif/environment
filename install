#! /bin/bash

## check for command line arguments
##  --sourcepath=<SOURCEPATH>
##          eg   ./install --sourcepath=$HOME
##          Use this option if you are a cosy developper.
##           This install bash will make a     ln -s ${SOURCEPATH}/library/src/cosy   ${rockstree}/share/lua/5.1/
##            instead of a classic             cp -r  ${tempwd}/library/src/cosy   ${rockstree}/share/lua/5.1/
##  --prefix=<PREFIX>
##          eg   ./install --prefix=$HOME
##          Use this option if you are a cosy user.
##
##  A user wants to install a client version  :
##      install --prefix=${TARGET_PATH} --client
##      install --prefix=${TARGET_PATH}
##      install ${TARGET_PATH}
##
##  A user wants to install a server version  :
##      install --prefix=${TARGET_PATH} --server
##
##  A developper wants to install a server version  :
##      install --sourcepath=${TARGET_DEV_PATH} --server
##
##  A developper wants to install a client version  :
##      install --sourcepath=${TARGET_DEV_PATH} --client
##      install --sourcepath=${TARGET_DEV_PATH}
##
###############################################################################################
for i in "$@"
do
  case ${i} in
    -s=*|--sourcepath=*)
      sourcepath="${i#*=}"
      sourcepath=${sourcepath%/}
      shift # past argument=value
    ;;
    -p=*|--prefix=*)
      prefix="${i#*=}"
      prefix=${prefix%/}
      shift # past argument=value
    ;;
    -m=*|--mode=*)
      mode="${i#*=}"
      shift # past argument=value
    ;;
    --in-ci)
    in_ci=true
    shift # past argument=value
    ;;
    -h|--help)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH] [--in-ci]"
      exit 1;
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--mode=server|client] [--sourcepath=PATH] [--in-ci]"
      exit 1;
      # unknown option
    ;;
  esac
done

parallel=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null)

prefix=${prefix:-/usr/local}
mode=${mode:-server}

red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'

## Now cmd args have been parsed
##################################

if [ "${mode}" = "server" ]; then
  versions="5.2"
fi
path=${prefix}/bin/cosy-path
commit=${prefix}/bin/cosy-version
cli=${prefix}/bin/cosy
server=${prefix}/bin/cosy-server
uninstall=${prefix}/bin/cosy-uninstall
check=${prefix}/bin/cosy-check
rockspec=${prefix}/bin/cosy-rockspec
rockstree=${prefix}/local/cosy
currentwd=$(pwd)
tempwd=$(mktemp -d 2>/dev/null || mktemp -d -t cosy)
log="${tempwd}/install.log"
case "${mode}" in
  "server")
    dependencies="\
      luasec \
      ansicolors \
      argparse \
      bcrypt \
      bit32 \
      copas-ev \
      coronest \
      dkjson \
      hotswap-ev \
      hotswap-http \
      i18n \
      jwt \
      layeredata \
      lua-cjson \
      lua-resty-http \
      luacrypto \
      luafilesystem \
      lualogging \
      luaposix \
      luasec \
      luasocket \
      lustache \
      md5 \
      serpent \
    ";;
  "client")
    dependencies=" \
      ansicolors \
      argparse \
      copas-ev \
      hotswap-ev \
      hotswap-http \
      i18n \
      layeredata \
      lua-cjson \
      luafilesystem \
      luaposix \
      luasocket \
      lustache \
    ";;
esac
development="\
  ansicolors \
  argparse \
  busted \
  luacheck \
  luacov \
  luafilesystem \
  lustache \
"

export CC="clang"

echo -e "Temporary directory: ${green}${tempwd}${nc}"
echo -e "Log file           : ${green}${log}${nc}"
echo -e "Mode               : ${green}${mode}${nc}"
echo -e "Prefix             : ${green}${prefix}${nc}"
if [ -z "${sourcepath+x}" ]; then
  echo -e "Source             : ${green}not set${nc}"
else
  echo -e "Source             : ${green}${sourcepath}${nc}"
fi

# check if apt or brew is available:
if command -v apt-get; then
  if sudo apt-get update; then
    apt_available=true
  fi
fi >> "${log}" 2>&1
if command -v brew; then
  brew_available=true
fi >> "${log}" 2>&1

if [ ! -z "${brew_available}" ]; then
  HOMEBREW_PREFIX=$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
  export CPATH="${HOMEBREW_PREFIX}/include:${CPATH}"
  export LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
  export DYLD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
fi
export CPATH="${prefix}/include:${CPATH}"
export LIBRARY_PATH="${prefix}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="${prefix}/lib:${LD_LIBRARY_PATH}"
export DYLD_LIBRARY_PATH="${prefix}/lib:${DYLD_LIBRARY_PATH}"

# Stop existing server:
function stop_server ()
{
  if [ -e "${server}" ]; then
    echo "Stopping running server."
    {
      ${server} stop --force
      ${cli} daemon:stop --force
    } >> "${log}" 2>&1
  fi
}

# Install dependencies:
function install_dependencies ()
{
  echo "Installing development packages."
  case "$(uname -s)" in
    "Linux")
      if [ ! -z "${apt_available+x}" ]; then
        sudo apt-get install --yes git make clang gcc diffutils patch curl unzip
      fi
      ;;
    "Darwin")
      ;;
    *)
      echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
      exit 1
      ;;
  esac >> "${log}" 2>&1
  if [ "${mode}" == "server" ]; then
    echo "Installing packages required by the server."
    case "$(uname -s)" in
      "Linux")
        if [ ! -z "${apt_available+x}" ]; then
          sudo apt-get install --yes perl build-essential \
                                     libssl-dev libev-dev \
                                     libreadline-dev libncurses5-dev libpcre3-dev \
                                     redis-server imagemagick
        fi
        ;;
      "Darwin")
        if [ ! -z "${brew_available}" ]; then
          brew install openssl libev pcre redis imagemagick
          brew link --force openssl
        fi
        ;;
      *)
        exit 1
        ;;
    esac >> "${log}" 2>&1
  fi
  if [ ! -z "${sourcepath+x}" ]; then
    echo "Installing developper tools."
    case "$(uname -s)" in
      "Linux")
        if [ ! -z "${apt_available+x}" ]; then
          for version in ${versions}
          do
            sudo apt-get install --yes lua${versions} liblua${version}-dev
          done
          if [ "$(apt-cache search shellcheck | grep shellcheck)" != "" ]; then
            sudo apt-get install --yes shellcheck
          fi
        fi
        ;;
      "Darwin")
        if [ ! -z "${brew_available}" ]; then
          brew install lua shellcheck
        fi
        ;;
      *)
        exit 1
        ;;
    esac >> "${log}" 2>&1
  fi
}

# Install libev:
function install_libev ()
{
  if [ "${mode}" != "client" ]; then
    return
  fi
  if [ -e "${prefix}/lib/libev.a" ]; then
    echo "Libev is already installed."
    return
  fi
  echo "Installing libev."
  (
    git clone --depth=1 "https://github.com/enki/libev.git"
    cd libev || exit 1
    ./configure --prefix="${prefix}"
    make -j"${parallel}"
    make install
  ) >> "${log}" 2>&1
}

# Install libssl:
function install_libssl ()
{
  if [ "${mode}" != "client" ]; then
    return
  fi
  if [ -e "${prefix}/lib/libssl.a" ]; then
    echo "Libssl is already installed."
    return
  fi
  echo "Installing libssl."
  (
    git clone --depth=1 "https://github.com/openssl/openssl.git"
    cd openssl || exit 1
    git checkout "OpenSSL_1_0_2-stable"
    case "$(uname -s)" in
      "Linux")
        ./config --prefix="${prefix}"
        ;;
      *)
        exit 1
        ;;
    esac
    make -j"${parallel}" CFLAG="-fPIC"
    make install_sw
  ) >> "${log}" 2>&1
}

# Install LuaJIT with 5.2 compatibility:
function install_luajit ()
{
  if [ -e "${rockstree}/5.1/bin/luajit" ]; then
    echo "Luajit is already installed."
    return
  fi
  echo "Installing luajit."
  curl --location --silent -O http://luajit.org/download/LuaJIT-2.1.0-beta1.tar.gz
  tar  xf LuaJIT-2.1.0-beta1.tar.gz
  cd   LuaJIT-2.1.0-beta1 || exit 1
  cat > "luajit.patch" <<EOL
diff -rupN LuaJIT-2.0.4.back/Makefile LuaJIT-2.0.4/Makefile
--- LuaJIT-2.0.4.back/Makefile	2015-10-02 17:19:16.774268017 +0200
+++ LuaJIT-2.0.4/Makefile	2015-10-02 17:11:14.533865635 +0200
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+export PREFIX= ${rockstree}/5.1
 export MULTILIB= lib
 ##############################################################################

diff -rupN LuaJIT-2.0.4.back/src/Makefile LuaJIT-2.0.4/src/Makefile
--- LuaJIT-2.0.4.back/src/Makefile	2015-10-02 17:19:06.294172164 +0200
+++ LuaJIT-2.0.4/src/Makefile	2015-10-02 17:18:50.882031189 +0200
@@ -100,7 +100,7 @@ XCFLAGS=
 # enabled by default. Some other features that *might* break some existing
 # code (e.g. __pairs or os.execute() return values) can be enabled here.
 # Note: this does not provide full compatibility with Lua 5.2 at this time.
-#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
+XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT
 #
 # Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.
 #XCFLAGS+= -DLUAJIT_DISABLE_JIT
EOL
  {
    patch -p1 -i "luajit.patch"
    make -j"${parallel}"
    make install CC="clang"
  } >> "${log}" 2>&1
  cd   ..
  ln -sf "luajit-2.1.0-beta1" "${rockstree}/5.1/bin/luajit"
  ln -sf "luajit-2.1"         "${rockstree}/5.1/include/luajit-2.0"
}

# Install openresty:
function install_openresty ()
{
  if [ "${mode}" != "server" ]; then
    return
  fi
  if [ -e "${prefix}/local/openresty/bin/resty" ]; then
    echo "Openresty is already installed."
    return
  fi
  echo "Installing openresty."
  (
    curl --location --silent -O https://openresty.org/download/ngx_openresty-1.9.3.1.tar.gz
    tar xf ngx_openresty-1.9.3.1.tar.gz
    cd ngx_openresty-1.9.3.1 || exit 1
    ./configure --prefix="${prefix}/local/openresty" \
                --without-lua51 \
                --with-luajit="${rockstree}/5.1" \
                --with-ipv6 \
                --with-pcre-jit
    make -j"${parallel}"
    make install
  ) >> "${log}" 2>&1
}

function install_luarocks ()
{
  if [ -e "${rockstree}/5.1/bin/luarocks" ]; then
    echo "Luarocks for lua-5.1 is already installed."
  else
  (
    echo "Installing luarocks for Lua-5.1."
    curl --location --silent -O http://luarocks.org/releases/luarocks-2.2.2.tar.gz
    tar  xf luarocks-2.2.2.tar.gz
    cd   luarocks-2.2.2 || exit 1
    {
      ./configure --prefix="${rockstree}/5.1" \
                  --with-lua="${rockstree}/5.1" \
                  --lua-suffix="jit" \
                  --with-lua-include="${rockstree}/5.1/include/luajit-2.0/" \
                  --with-lua-lib="${rockstree}/5.1/lib/"
        make bootstrap
    } >> "${log}" 2>&1
  )
  fi

  if [ ! -z "${sourcepath+x}" ]; then
    for version in ${versions}
    do
      if [ -e "${rockstree}/${version}/bin/luarocks" ]; then
        echo "Luarocks for lua-${version} is already installed."
      else
      (
        echo "Installing luarocks for lua-${version}."
        if [ ! -d luarocks-2.2.2 ]; then
          curl --location --silent -O http://luarocks.org/releases/luarocks-2.2.2.tar.gz
          tar  xf luarocks-2.2.2.tar.gz
        fi
        cd   luarocks-2.2.2 || exit 1
        {
          make clean
          ./configure --prefix="${rockstree}/${version}" \
                      --lua-version="${version}" \
                      --lua-suffix="${version}"
          make bootstrap
        } >> "${log}" 2>&1
      )
      fi
    done
  fi

}

# Install cosyverif:
function install_cosyverif ()
{
  mkdir -p "${rockstree}/git"
  {
    ( if [ ! -d "${rockstree}/git/redis-lua" ]; then
        git clone --depth=1 \
                  https://github.com/nrk/redis-lua.git \
                  "${rockstree}/git/redis-lua"
      fi
      cd "${rockstree}/git/redis-lua" || exit 1
      git pull
    )
    ( if [ ! -d "${rockstree}/git/lua-websockets" ]; then
        git clone --depth=1 \
                  https://github.com/saucisson/lua-websockets.git \
                  "${rockstree}/git/lua-websockets"
      fi
      cd "${rockstree}/git/lua-websockets" || exit 1
      git pull
    )
    if [ -z "${sourcepath+x}" ]; then
      ( if [ ! -d "${rockstree}/git/library" ]; then
          rm -rf "${rockstree}/git/library"
          git clone --depth=1 \
                    https://github.com/CosyVerif/library.git \
                    "${rockstree}/git/library"
        fi
        cd "${rockstree}/git/library" || exit 1
        git pull
      )
    else
      rm -rf "${rockstree}/git/library"
      ln -s  "${sourcepath}" \
             "${rockstree}/git/library"
    fi
  } >> "${log}" 2>&1
  for version in 5.1 ${versions}
  do
    echo "Installing rocks for lua-${version}."
    if [ -d "${rockstree}/${version}/share/lua/${version}" ]; then
      # Remove symlink to cosy to avoid modification of ${sourcepath} files by luarocks.
      rm -rf "${rockstree}/${version}/share/lua/${version}/redis"*
      rm -rf "${rockstree}/${version}/share/lua/${version}/websocket"*
      rm -rf "${rockstree}/${version}/share/lua/${version}/cosy"*
      # Install luasec before everything to allow the use of HTTPS in luarocks:
      case "${mode}" in
        "server")
          ;;
        "client")
          options=(OPENSSL_DIR="${prefix}" LIBEV_DIR="${prefix}")
          ;;
      esac
      for dependency in ${dependencies}; do
        if "${rockstree}/${version}/bin/luarocks" list \
            --porcelain \
            --tree="${rockstree}/${version}" \
            | grep --silent "${dependency}"; then
          echo "  Not installing ${dependency} as it is already installed."
        else
          echo "  Installing ${dependency} as it is not installed."
          # shellcheck disable=SC2086
          "${rockstree}/${version}/bin/luarocks" install "${dependency}" ${options[*]} \
              >> "${log}" 2>&1
        fi
      done
      # Create symlinks in rockstree:
      rm -rf "${rockstree}/${version}/share/lua/${version}/redis"*
      ln -s  "../../../../git/redis-lua/src/redis.lua" \
             "${rockstree}/${version}/share/lua/${version}/redis.lua"
      rm -rf "${rockstree}/${version}/share/lua/${version}/websocket"*
      ln -s  "../../../../git/lua-websockets/src/websocket.lua" \
             "${rockstree}/${version}/share/lua/${version}/websocket.lua"
      ln -s  "../../../../git/lua-websockets/src/websocket" \
             "${rockstree}/${version}/share/lua/${version}/websocket"
      ln -s  "../../../../git/library/src/cosy" \
             "${rockstree}/${version}/share/lua/${version}/cosy"
    fi
    if [ ! -z "${sourcepath+x}" ] && [ "${mode}" != "client" ]; then
      echo "Installing development tools for lua-${version}."
      for dependency in ${development}; do
        if "${rockstree}/${version}/bin/luarocks" list \
            --porcelain \
            --tree="${rockstree}/${version}" \
            | grep --silent "${dependency}"; then
          echo "  Not installing ${dependency} as it is already installed."
        else
          echo "  Installing ${dependency} as it is not installed."
          "${rockstree}/${version}/bin/luarocks" install "${dependency}" \
            >> "${log}" 2>&1
        fi
      done
    fi
  done
}

function install_main ()
{
  base=$(basename "${path}")
  cat > "${path}" <<EOF
#! /bin/bash

export COSY_PREFIX="${prefix}"

if command -v "brew" > /dev/null 2&>1; then
  HOMEBREW_PREFIX=\$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
  export LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
  export DYLD_LIBRARY_PATH="\${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
fi

export PATH="\${COSY_PREFIX}/bin:\${COSY_PREFIX}/local/cosy/5.1/bin:\${PATH}"
export LUA_PATH="\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/?.lua;\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/?/init.lua"
export LUA_CPATH="\${COSY_PREFIX}/local/cosy/5.1/lib/lua/5.1/?.so"

export LIBRARY_PATH="\${COSY_PREFIX}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${LD_LIBRARY_PATH}"
export DYLD_LIBRARY_PATH="\${COSY_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
EOF
  chmod a+x "${path}"

  if [ -z "${sourcepath+x}" ]; then
    cd "\${COSY_PREFIX}/local/cosy/git/library" || exit 1
    version=$(git describe)
    cd "${tempwd}" || exit 1
    cat > "${commit}" <<EOF
#! /bin/bash

echo "${version}"
EOF
  else
    cat > "${commit}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
(
  cd "\${COSY_PREFIX}/local/cosy/git/library" || exit 1
  git describe
)
EOF
  fi
  chmod a+x "${commit}"

  cat > "${cli}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/cli/init.lua" "\$@"
EOF
  chmod a+x "${cli}"

if [ "${mode}" == "server" ]; then
  cat > "${server}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/server/cli.lua" "\$@"
EOF
  chmod a+x "${server}"
fi

  cat > "${uninstall}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
if [ -e "\${COSY_PREFIX}/bin/cosy-server" ]; then
  "\${COSY_PREFIX}/bin/cosy-server" stop --force
fi
rm -rf "\${COSY_PREFIX}/bin/cosy"* \
       "\${COSY_PREFIX}/etc/cosy"* \
       "\${COSY_PREFIX}/local/cosy" \
       "\${COSY_PREFIX}/local/openresty"*
# shellcheck disable=SC2050
if [ "${mode}" == "client" ]; then
  rm -rf "\${COSY_PREFIX}/bin/c_rehash" \
         "\${COSY_PREFIX}/bin/openssl" \
         "\${COSY_PREFIX}/include/ev"*.h \
         "\${COSY_PREFIX}/include/openssl" \
         "\${COSY_PREFIX}/lib/libcrypto"* \
         "\${COSY_PREFIX}/lib/libssl"* \
         "\${COSY_PREFIX}/lib/libev"* \
         "\${COSY_PREFIX}/lib/engines" \
         "\${COSY_PREFIX}/lib/pkgconfig/libcrypto.pc" \
         "\${COSY_PREFIX}/lib/pkgconfig/libssl.pc" \
         "\${COSY_PREFIX}/lib/pkgconfig/openssl.pc" \
         "\${COSY_PREFIX}/share/man/man3/ev.3" \
         "\${COSY_PREFIX}/ssl"
fi
# shellcheck disable=SC2034
for i in {1..10}; do
  find "\${COSY_PREFIX}" -maxdepth 5 -empty -exec rm -rf {} \; \
    > /dev/null 2>&1
done
echo -e "Cosy has been ${green}successfully uninstalled${nc}."
EOF
  chmod a+x "${uninstall}"

  if [ ! -z "${sourcepath+x}" ] && [ "${mode}" != "client" ]; then
    cat > "${check}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
(
  if [ \$# -ge 1 ]; then
    tmpdir=\${1}
  else
    tmpdir=\$(mktemp -d 2>/dev/null || mktemp -d -t cosy-check)
  fi
  if [ ! -d "\${tmpdir}" ]; then
    mkdir -p "\${tmpdir}"
  fi
  shift
  cd  "\${tmpdir}" || exit 1
  "\${COSY_PREFIX}/bin/cosy-server" start --force --clean
  luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/check/init.lua" "\$@"
  "\${COSY_PREFIX}/bin/cosy-server" stop  --force
  echo
  echo -e "Test and Coverage reports are in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${check}"

    cat > "${rockspec}" <<EOF
#! /bin/bash

root=\$(dirname "\$0")
# shellcheck source=/dev/null
source "\${root}/${base}"
(
  if [ \$# -ge 1 ]; then
    tmpdir=\${1}
  else
    tmpdir=\$(mktemp -d 2>/dev/null || mktemp -d -t cosy-rockspec)
  fi
  if [ ! -d "\${tmpdir}" ]; then
    mkdir -p "\${tmpdir}"
  fi
  shift
  cd  "\${tmpdir}" || exit 1
  luajit "\${COSY_PREFIX}/local/cosy/5.1/share/lua/5.1/cosy/rockspec/init.lua" "\$@"
  echo
  echo -e "Rockspec is in ${green}\${tmpdir}${nc}."
)
EOF
    chmod a+x "${rockspec}"
  fi
}

function install_configuration ()
{
  echo -e "Installing configuration in ${green}${prefix}/etc/cosy.conf${nc}."
  version=$("${prefix}/bin/cosy-version")
  mkdir -p "${prefix}/etc"
  cat > "${prefix}/etc/cosy.conf" <<EOL
return {}
EOL
}

function fix_string ()
{
  echo "$1" \
    | sed -e 's/^[[:space:]]+/ /' \
    | sed -e 's/^[[:space:]]*//' \
    | sed -e 's/[[:space:]]*$//' \
    | tr '/' '-' \
    | tr '[:upper:]' '[:lower:]'
}

# Generate the package:
function generate_package ()
{
  if [ "${mode}" != "client" ]; then
    return
  fi
  parentdir=$(dirname "${prefix}")
  version=$("${prefix}/bin/cosy-version")
  version=$(fix_string "${version}")
  os=$(fix_string "$(uname -s)")
  arch=$(fix_string "$(uname -m)")
  archive="cosy-${mode}-${version}-${os}-${arch}.tar.gz"
  echo -e "Packaging in ${green}${parentdir}/${archive}${nc}."
  cp -r  "${prefix}" "${tempwd}/cosy-${mode}"
  # Clean:
  {
    if [ -s "${tempwd}/cosy-${mode}/local/cosy/git/library" ]; then
      target=$(readlink "${tempwd}/cosy-${mode}/local/cosy/git/library")
      rm -rf "${tempwd}/cosy-${mode}/local/cosy/git/library"
      cp -r  "${target}" \
             "${tempwd}/cosy-${mode}/local/cosy/git/library"
    fi
    "${tempwd}/cosy-${mode}/local/cosy/5.1/bin/luarocks" remove \
       --tree="${tempwd}/cosy-${mode}/local/cosy/5.1/" luarocks
    rm -rf  "${tempwd}/cosy-${mode}/local/cosy/5.1/lib/luarocks" \
            "${tempwd}/cosy-${mode}/bin/c_rehash" \
            "${tempwd}/cosy-${mode}/bin/openssl" \
            "${tempwd}/cosy-${mode}/include/event.h" \
            "${tempwd}/cosy-${mode}/include/ev.h" \
            "${tempwd}/cosy-${mode}/include/ev++.h" \
            "${tempwd}/cosy-${mode}/include/openssl"
    sed -i  "s|export COSY_PREFIX=.*|export COSY_PREFIX=\"...\"|" \
            "${tempwd}/cosy-${mode}/bin/cosy-path" \
            >> "${log}" 2>&1
  } >> "${log}" 2>&1
  # Package:
  case "$(uname -s)" in
    "Linux")
      {
        rm -f   "${archive}"
        tar czf "${archive}" "cosy-${mode}"
        cp      "${archive}" "${parentdir}/"
      } >> "${log}" 2>&1
      ;;
    "Darwin")
      {
        rm -f   "${archive}"
        tar czf "${archive}" "cosy-${mode}"
        cp      "${archive}" "${parentdir}/"
      } >> "${log}" 2>&1
      ;;
    *)
    exit 1
  esac
}

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${log}"
  fi
  exit 1
}

mkdir -p "${prefix}"
mkdir -p "${prefix}/bin"
mkdir -p "${prefix}/lib"
cd "${tempwd}" || exit 1
stop_server
trap error ERR
install_dependencies
install_libev
# install_libssl
install_luajit
install_openresty
install_luarocks
install_cosyverif
install_main
install_configuration
generate_package
cd "${currentwd}" || exit 1

echo "You can now try the following commands:"
if [ "${mode}" == "server" ]; then
  echo "- ${prefix}/bin/cosy-server start [--clean] [--force]"
  echo "- ${prefix}/bin/cosy-server stop  [--force]"
fi
echo "- ${prefix}/bin/cosy            : to run the cosy client"
echo "- ${prefix}/bin/cosy-version    : to get version number"
echo "- ${prefix}/bin/cosy-uninstall  : to uninstall cosy"
if [ ! -z "${sourcepath+x}" ] && [ "${mode}" != "client" ]; then
  echo "This development environment also provides two commands:"
  echo "- ${prefix}/bin/cosy-check    : to run checks, tests and coverage"
  echo "- ${prefix}/bin/cosy-rockspec : to generate rockspec"
fi

if [ ! -z "${in_ci+x}" ]; then
  cat "${log}"
else
  rm -rf "${tempwd}"
  rm -f  "${log}"
fi
