#! /usr/bin/env lua

local defaults = {
}

if _G.cli then
  return defaults
else
  _G.cli = true
end

local cli        = require "cliargs"
local logging    = require "logging"
local logging    = require "logging"
logging.console  = require "logging.console"
local colors     = require "ansicolors"

local logger     =  logging.console "%message\n"
require "cosy.string"

cli:set_name (arg [0])
cli:add_argument (
  "input",
  "input lua file"
)
cli:optarg (
  "inputs",
  "inputs", nil, 999
)
cli:add_flag (
  "-v, --verbose",
  "verbose mode"
)
local args = cli:parse_args ()
if not args then
  cli:print_help ()
  os.exit (1)
end

if args.inputs == nil then
  args.inputs = {}
elseif type (args.inputs) == "string" then
  if args.inputs ~= "" then
    args.inputs = { args.inputs }
  else
    args.inputs = {}
  end
end
table.insert (args.inputs, 1, args.input)

if args.verbose then
  logger:setLevel (logging.DEBUG)
else
  logger:setLevel (logging.INFO)
end

local keys = {}
for i = 1, #args.inputs do
  local filename  = args.inputs [i]
  local file, err = io.open (filename, "r")
  if not file then
    logger:error ("Cannot open " .. filename .. ".")
  else
    logger:debug ("Opened " .. filename .. "for reading.")
    for line in file:lines () do
      local m = line:match [[_%s*=%s*"(.*)"]]
      if m then
        keys [m] = (keys [m] or 0) + 1
      end
    end
  end
end
local en = require "cosy.i18n.en"
for key, n in pairs (keys) do
  if not en [key] then
    logger:warn (colors ("%{red}" .. ("Key %{key} is used %{n} times, but never defined."   % {
      key = key,
      n   = n,
    })))
  end
end
for key in pairs (en) do
  if not keys [key] then
    logger:warn (colors ("%{yellow}" .. ("Key %{key} is defined but never used." % {
      key = key,
    })))
  end
end