#! /usr/bin/env bash

set -e
set -o pipefail

for i in "$@"
do
  case ${i} in
    -p=*|--prefix=*)
      cosy_prefix="${i#*=}"
      cosy_prefix="${cosy_prefix%/}"
    ;;
    -l=*|--lua=*)
      lua_version="${i#*=}"
      lua_version="${lua_version%/}"
    ;;
    -m|--minimal)
      minimal=true
    ;;
    -i|--in-ci)
      in_ci=true
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--lua=LUA_VERSION] [--minimal] [--in-ci]"
      exit 1;
    ;;
  esac
  shift
done

# Useful variables:
currentwd=$(dirname "${BASH_SOURCE[0]}")
currentwd=$(dirname "${currentwd}")
cosy_temp=$(mktemp -d 2>/dev/null || mktemp -d -t cosy)
cosy_log="${cosy_temp}/install.log"
cosy_prefix=${cosy_prefix:-${cosy_temp}}
lua_version=${lua_version:-5.2}
parallel=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null)

# Test if sudo is required:
{
  if [ -d "${cosy_prefix}" ]; then
    write_test=${cosy_prefix}
  else
    write_test=$(dirname "${cosy_prefix}")
  fi
  if [ ! -w "${write_test}" ]; then
    export sudo="sudo"
  fi
}

if [ ! -z "${in_ci+x}" ]; then
  export red=''
  export green=''
  export nc=''
else
  export red='\033[0;31m'
  export green='\033[0;32m'
  export nc='\033[0m'
fi

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}
trap error ERR

# Detect if environment is already installed:
if command -v git >> "${cosy_log}" 2>&1; then
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/"
  if [ -f "${cosy_prefix}/share/cosy/environment.version" ]; then
    oldversion=$(cat "${cosy_prefix}/share/cosy/environment.version")
  fi
  pushd "${currentwd}" >> "${cosy_log}" 2>&1
  version=$(git rev-parse HEAD)
  popd >> "${cosy_log}" 2>&1
  if [ "${version}" = "${oldversion}" ]; then
    echo -e "Environment is already installed at version ${green}${oldversion}${nc}."
    return
  fi
fi >> "${cosy_log}" 2>&1

{
  echo -n "Initializing git submodules... "
  (
    cd "${currentwd}" || exit 1
    git submodule init
    git submodule update
  ) >> "${cosy_log}" 2>&1 \
  && echo -e "${green}success${nc}" \
  || echo -e "${red}failure${nc}"
}

# Fix prefix to always be an absolute path:
. ./dependencies/sh-realpath/realpath.sh
cosy_prefix=$(realpath "${cosy_prefix}")

# Install dependencies:
{
  echo -n "Installing development packages... "
  if command -v apt-get; then
    if sudo apt-get update; then
      apt_available=true
    fi
  fi >> "${cosy_log}" 2>&1
  if command -v brew; then
    brew_available=true
  fi >> "${cosy_log}" 2>&1
  if [ -z "${apt_available}" ] && [ -z "${brew_available}" ]; then
    echo -e "${green}skipped${nc}"
    return
  fi

  case "$(uname -s)" in
    "Linux")
      sudo apt-get update  --yes
      sudo apt-get install --yes make clang gcc diffutils patch curl unzip \
                                 perl build-essential wget python python-pip \
                                 libc6-dev libssl-dev \
                                 libreadline-dev libncurses5-dev libpcre3-dev \
                                 redis-server imagemagick npm caca-utils
      sudo pip install hererocks
      ;;
    "Darwin")
      HOMEBREW_PREFIX=$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
      export CPATH="${HOMEBREW_PREFIX}/include:${CPATH}"
      export LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
      export LD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
      export DYLD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
      brew update
      brew install openssl pcre python redis imagemagick wget npm libcaca
      brew link --force openssl
      pip install hererocks
      ;;
    *)
      echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
      exit 1
      ;;
  esac >> "${cosy_log}" 2>&1 \
       && echo -e "${green}success${nc}" \
       || echo -e "${red}failure${nc}"
  export CPATH="${cosy_prefix}/include:${CPATH}"
  export LIBRARY_PATH="${cosy_prefix}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="${cosy_prefix}/lib:${LD_LIBRARY_PATH}"
}

# Install libev:
{
  export CC=clang
  echo -n "Installing libev... "
  (
    cd "${currentwd}/dependencies/libev"
    ./configure --prefix="${cosy_prefix}"
    make
    ${sudo} make install
    make clean
  ) >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
}

# Install lua, luarocks and packages:
{
  export CC=clang
  echo -n "Installing lua ${lua_version} and luarocks... "
  ${sudo} hererocks "${cosy_prefix}" -r^ --lua="${lua_version}" \
    >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
  dependencies=(
    argparse
    busted
    luacheck
    luacov
    luacov-coveralls
    luafilesystem
    luasec
    lustache
    serpent
  )
  for dependency in ${dependencies[*]}; do
    echo $PWD ; ls $PWD
    if "${cosy_prefix}/bin/luarocks" list --porcelain \
        >> "${cosy_log}" 2>&1 \
        | grep --silent "${dependency}"; then
      echo "  Not installing ${dependency} as it is already installed."
    else
      echo -n "  Installing ${dependency} as it is not installed... "
      # shellcheck disable=SC2086
      ${sudo} "${cosy_prefix}/bin/luarocks" install "${dependency}" \
        >> "${cosy_log}" 2>&1 \
       && echo -e "${green}success${nc}" \
       || echo -e "${red}failure${nc}"
    fi
  done
  echo -n "Installing lua 5.1 and luarocks for nginx... "
  ${sudo} hererocks "${cosy_temp}/lua_install" -r^ --lua="5.1" \
    >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
  nginx_dependencies=(
    lua-cjson
    lua-resty-http
    md5
  )
  for dependency in ${nginx_dependencies[*]}; do
    if "${cosy_temp}/lua_install/bin/luarocks" list --tree="${cosy_prefix}" --porcelain \
        >> "${cosy_log}" 2>&1 \
        | grep --silent "${dependency}"; then
      echo "  Not installing ${dependency} as it is already installed."
    else
      echo -n "  Installing ${dependency} as it is not installed... "
      # shellcheck disable=SC2086
      ${sudo} "${cosy_temp}/lua_install/bin/luarocks" install --tree="${cosy_prefix}" "${dependency}" \
        >> "${cosy_log}" 2>&1 \
       && echo -e "${green}success${nc}" \
       || echo -e "${red}failure${nc}"
    fi
  done
  echo -n "Installing sh-realpath... "
  ( ${sudo} cp "${currentwd}/dependencies/sh-realpath/realpath.sh" "${cosy_prefix}/bin/"
    ${sudo} chmod a+x "${cosy_prefix}/bin/realpath.sh"
  ) >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
}

if [ ! -z "${minimal+x}" ]; then
  echo -e "Skipping openresty and web dependencies as minimal install is set."
  return
fi

# Install web dependencies:
(
  cd "${currentwd}" || exit 1
  web_dependencies=(
    bootbox
    bootstrap3
    font-awesome
    jquery
    jquery-locationpicker
    sjcl
  )
  rm -rf node_modules
  echo "Installing web dependencies... "
  for dependency in ${web_dependencies[*]}; do
    echo -n "  Installing ${dependency}... "
    npm install "${dependency}" >> "${cosy_log}" 2>&1 \
      && echo -e "${green}success${nc}" \
      || echo -e "${red}failure${nc}"
  done
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www"
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/js"
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/css"
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/fonts"
  for module in node_modules/*; do
    name=$(basename "${module}")
    ${sudo} cp "${module}/dist/"*.js    "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/dist/"*.map   "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/dist/js/"*    "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/dist/css/"*   "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
    ${sudo} cp "${module}/dist/fonts/"* "${cosy_prefix}/share/cosy/www/fonts/" 2> /dev/null || true
    ${sudo} cp "${module}/js/"*         "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/css/"*        "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
    ${sudo} cp "${module}/fonts/"*      "${cosy_prefix}/share/cosy/www/fonts/" 2> /dev/null || true
    ${sudo} cp "${module}/${name}"*.js  "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/${name}"*.map "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
    ${sudo} cp "${module}/${name}"*.css "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
  done
  ${sudo} rm -rf node_modules
  ${sudo} cp "dependencies/lua.vm.js/dist/lua.vm.js" "${cosy_prefix}/share/cosy/www/js/"
)

# Install openresty:
echo -n "Installing openresty... "
(
  cd "${currentwd}/dependencies/openresty" || exit 1
  make
  for dir in openresty-*; do
    if [ -d "${dir}" ]; then
      cd "${dir}" || exit 1
      ./configure --prefix="${cosy_prefix}" \
                  --without-lua51 \
                  --with-ipv6 \
                  --with-pcre-jit
      make -j"${parallel}"
      ${sudo} make install
      make clean
      break
    fi
  done
) >> "${cosy_log}" 2>&1 \
  && echo -e "${green}success${nc}" \
  || echo -e "${red}failure${nc}"

git rev-parse HEAD > "${cosy_temp}/environment.version"
${sudo} mv "${cosy_temp}/environment.version" "${cosy_prefix}/share/cosy/environment.version"

if [ ! -z "${in_ci+x}" ]; then
  cat "${cosy_log}"
fi
